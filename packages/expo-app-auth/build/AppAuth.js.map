{"version":3,"file":"AppAuth.js","sourceRoot":"","sources":["../src/AppAuth.ts"],"names":[],"mappings":"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","sourcesContent":["import { UnavailabilityError } from 'expo-errors';\nimport invariant from 'invariant';\n\nimport {\n  OAuthACRValuesParameter,\n  OAuthBaseProps,\n  OAuthDisplayParameter,\n  OAuthIDTokenHintParameter,\n  OAuthLoginHintParameter,\n  OAuthMaxAgeParameter,\n  OAuthNonceParameter,\n  OAuthParameters,\n  OAuthPromptParameter,\n  OAuthProps,\n  OAuthRevokeOptions,\n  OAuthServiceConfiguration,\n  OAuthUILocalesParameter,\n  TokenResponse,\n} from './AppAuth.types';\nimport ExpoAppAuth from './ExpoAppAuth';\n\nexport {\n  OAuthServiceConfiguration,\n  OAuthDisplayParameter,\n  OAuthPromptParameter,\n  OAuthNonceParameter,\n  OAuthUILocalesParameter,\n  OAuthIDTokenHintParameter,\n  OAuthMaxAgeParameter,\n  OAuthLoginHintParameter,\n  OAuthACRValuesParameter,\n  OAuthParameters,\n  OAuthBaseProps,\n  OAuthProps,\n  OAuthRevokeOptions,\n  TokenResponse,\n};\n\nconst isValidString = (s?: string): boolean => !!(s && typeof s === 'string');\n\nfunction isValidClientId(clientId?: string): void {\n  if (!isValidString(clientId)) throw new Error('Config error: clientId must be a string');\n}\n\nfunction isValidProps({ issuer, redirectUrl, clientId, serviceConfiguration }: OAuthProps): void {\n  const _serviceConfigIsValid =\n    serviceConfiguration &&\n    isValidString(serviceConfiguration.authorizationEndpoint) &&\n    isValidString(serviceConfiguration.tokenEndpoint);\n\n  if (!isValidString(issuer) && !_serviceConfigIsValid)\n    throw new Error('Invalid you must provide either an issuer or a service endpoints');\n  if (!isValidString(redirectUrl)) throw new Error('Config error: redirectUrl must be a string');\n  isValidClientId(clientId);\n}\n\nasync function _executeAsync(props: OAuthProps): Promise<TokenResponse> {\n  if (!props.redirectUrl) {\n    props.redirectUrl = `${ExpoAppAuth.OAuthRedirect}:/oauthredirect`;\n  }\n  isValidProps(props);\n  return await ExpoAppAuth.executeAsync(props);\n}\n\nexport async function authAsync(props: OAuthProps): Promise<TokenResponse> {\n  if (!ExpoAppAuth.executeAsync) {\n    throw new UnavailabilityError('expo-app-auth', 'authAsync');\n  }\n  return await _executeAsync(props);\n}\n\nexport async function refreshAsync(\n  props: OAuthProps,\n  refreshToken: string\n): Promise<TokenResponse> {\n  if (!ExpoAppAuth.executeAsync) {\n    throw new UnavailabilityError('expo-app-auth', 'refreshAsync');\n  }\n  if (!refreshToken) {\n    throw new Error('Please include the refreshToken');\n  }\n  return await _executeAsync({\n    isRefresh: true,\n    refreshToken,\n    ...props,\n  });\n}\n\n/* JS Method */\nexport async function revokeAsync(\n  { clientId, issuer, serviceConfiguration }: OAuthBaseProps,\n  { token, isClientIdProvided = false }: OAuthRevokeOptions\n): Promise<any> {\n  if (!token) {\n    throw new Error('Please include the token to revoke');\n  }\n\n  isValidClientId(clientId);\n\n  if (\n    !isValidString(issuer) ||\n    (serviceConfiguration && !isValidString(serviceConfiguration.revocationEndpoint))\n  ) {\n    throw new Error('Config error: you must provide either an issuer or a revocation endpoint');\n  }\n\n  let revocationEndpoint;\n  if (serviceConfiguration && serviceConfiguration.revocationEndpoint) {\n    revocationEndpoint = serviceConfiguration.revocationEndpoint;\n  } else {\n    const response = await fetch(`${issuer}/.well-known/openid-configuration`);\n    const openidConfig = await response.json();\n\n    invariant(\n      openidConfig.revocation_endpoint,\n      'The OpenID config does not specify a revocation endpoint'\n    );\n\n    revocationEndpoint = openidConfig.revocation_endpoint;\n  }\n\n  const body = `token=${token}${isClientIdProvided ? `&client_id=${clientId}` : ''}`;\n  const headers = { 'Content-Type': 'application/x-www-form-urlencoded' };\n  try {\n    const results = await fetch(revocationEndpoint, {\n      method: 'POST',\n      headers,\n      body,\n    });\n    return results;\n  } catch (error) {\n    throw new Error(`Failed to revoke token ${error.message}`);\n  }\n}\n\nexport const { OAuthRedirect, URLSchemes } = ExpoAppAuth;\n"]}