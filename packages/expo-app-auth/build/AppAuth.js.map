{"version":3,"file":"AppAuth.js","sourceRoot":"","sources":["../src/AppAuth.ts"],"names":[],"mappings":"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","sourcesContent":["import { NativeModulesProxy } from 'expo-core';\nimport invariant from 'invariant';\nconst { ExpoAppAuth } = NativeModulesProxy;\n\nexport type OAuthServiceConfiguration = {\n  revocationEndpoint?: string,\n  authorizationEndpoint?: string,\n  registrationEndpoint?: string,\n  tokenEndpoint: string,\n};\n\n/* ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User. */\nexport type OAuthDisplayParameter = 'page' | 'popup' | 'touch' | 'wap';\n\n/*\n * Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization\n * Server prompts the End-User for reauthentication and consent.\n */\nexport type OAuthPromptParameter = 'none' | 'login' | 'consent' | 'select_account';\n\n/*\n * String value used to associate a Client session with an ID Token, and to mitigate replay attacks.\n * The value is passed through unmodified from the Authentication Request to the ID Token.\n * Sufficient entropy MUST be present in the nonce values used to prevent attackers from guessing values.\n * For implementation notes, see: https://openid.net/specs/openid-connect-core-1_0.html#NonceNotes\n */\nexport type OAuthNonceParameter = string;\n\n/*\n * End-User's preferred languages and scripts for the user interface,\n * represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference.\n * For instance, the value \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation),\n * followed by English (without a region designation).\n * An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.\n */\nexport type OAuthUILocalesParameter = string;\n\n/*\n * ID Token previously issued by the Authorization Server being passed as a\n * hint about the End-User's current or past authenticated session with the Client.\n * If the End-User identified by the ID Token is logged in or is logged in by the\n * request, then the Authorization Server returns a positive response; otherwise,\n * it SHOULD return an error, such as login_required.\n * When possible, an id_token_hint SHOULD be present when prompt=none is used and an\n *  invalid_request error MAY be returned if it is not; however, the server\n * SHOULD respond successfully when possible, even if it is not present.\n * The Authorization Server need not be listed as an audience of the ID\n * Token when it is used as an id_token_hint value.\n * If the ID Token received by the RP from the OP is encrypted, to use it as an\n * `id_token_hint`, the Client MUST decrypt the signed ID Token contained within the\n * encrypted ID Token.\n * The Client MAY re-encrypt the signed ID token to the Authentication Server using\n * a key that enables the server to decrypt the ID Token, and use the re-encrypted\n * ID token as the `id_token_hint` value.\n */\nexport type OAuthIDTokenHintParameter = string;\n\n/*\n * Maximum Authentication Age.\n * Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated by the OP.\n * If the elapsed time is greater than this value, the OP MUST attempt to actively re-authenticate the End-User.\n * (The max_age request parameter corresponds to the OpenID 2.0\n * https://openid.net/specs/openid-connect-core-1_0.html#OpenID.PAPE `max_auth_age` request parameter.)\n * When max_age is used, the ID Token returned MUST include an auth_time Claim Value.\n */\nexport type OAuthMaxAgeParameter = string;\n\n/*\n * Hint to the Authorization Server about the login identifier the End-User\n * might use to log in (if necessary).\n * This hint can be used by an RP if it first asks the End-User for their\n * e-mail address (or other identifier) and then wants to pass that value\n * as a hint to the discovered authorization service.\n * It is RECOMMENDED that the hint value match the value used for discovery.\n * This value MAY also be a phone number in the format specified for the\n * `phone_number` Claim.\n * The use of this parameter is left to the OP's discretion.\n */\nexport type OAuthLoginHintParameter = string;\n\n/*\n * Requested Authentication Context Class Reference values.\n * Space-separated string that specifies the acr values that the Authorization Server\n * is being requested to use for processing this Authentication Request, with the\n * values appearing in order of preference.\n * The Authentication Context Class satisfied by the authentication performed is\n * returned as the acr Claim Value, as specified in Section 2.\n * The acr Claim is requested as a Voluntary Claim by this parameter.\n */\nexport type OAuthACRValuesParameter = string;\n\nexport type OAuthParameters = {\n  nonce?: OAuthNonceParameter,\n  display?: OAuthParametersDisplay,\n  prompt?: OAuthPromptParameter,\n  max_age?: OAuthMaxAgeParameter,\n  ui_locales?: OAuthUILocalesParameter,\n  id_token_hint?: OAuthIDTokenHintParameter,\n  login_hint?: OAuthLoginHintParameter,\n  acr_values?: OAuthACRValuesParameter,\n  [string]: string,\n};\n\nexport type OAuthBaseProps = {\n  clientId: string,\n  issuer: string,\n  serviceConfiguration?: OAuthServiceConfiguration,\n};\n\nexport type OAuthProps = OAuthBaseProps & {\n  redirectUrl?: string,\n  clientSecret?: string,\n  scopes?: Array<string>,\n  additionalParameters?: OAuthParameters,\n  canMakeInsecureRequests?: boolean,\n};\n\nexport type OAuthRevokeOptions = {\n  token: string,\n  isClientIdProvided: boolean,\n};\n\nexport type TokenResponse = {\n  accessToken: string | null,\n  accessTokenExpirationDate: string | null,\n  additionalParameters: { [string]: any } | null,\n  idToken: string | null,\n  tokenType: string | null,\n  refreshToken?: string,\n};\n\nconst isValidString = (s: ?string): boolean => s && typeof s === 'string';\n\nfunction isValidClientId(clientId: ?string): void {\n  if (!isValidString(clientId)) throw new Error('Config error: clientId must be a string');\n}\n\nfunction isValidProps({\n  isRefresh,\n  issuer,\n  redirectUrl,\n  clientId,\n  clientSecret,\n  scopes,\n  additionalParameters,\n  serviceConfiguration,\n}: OAuthProps): void {\n  const _serviceConfigIsValid =\n    serviceConfiguration &&\n    isValidString(serviceConfiguration.authorizationEndpoint) &&\n    isValidString(serviceConfiguration.tokenEndpoint);\n\n  if (!isValidString(issuer) && !_serviceConfigIsValid)\n    throw new Error('Invalid you must provide either an issuer or a service endpoints');\n  if (!isValidString(redirectUrl)) throw new Error('Config error: redirectUrl must be a string');\n  isValidClientId(clientId);\n}\n\nasync function _executeAsync(props: OAuthProps): Promise<TokenResponse> {\n  if (!props.redirectUrl) {\n    props.redirectUrl = `${ExpoAppAuth.OAuthRedirect}:/oauthredirect`;\n  }\n  isValidProps(props);\n  return await ExpoAppAuth.executeAsync(props);\n}\n\nexport async function authAsync(props: OAuthProps): Promise<TokenResponse> {\n  return await _executeAsync(props);\n}\n\nexport async function refreshAsync(\n  props: OAuthProps,\n  refreshToken: string\n): Promise<TokenResponse> {\n  if (!refreshToken) throw new Error('Please include the refreshToken');\n  return await _executeAsync({\n    isRefresh: true,\n    refreshToken,\n    ...props,\n  });\n}\n\nexport async function revokeAsync(\n  { clientId, issuer, serviceConfiguration }: OAuthBaseProps,\n  { token, isClientIdProvided = false }: OAuthRevokeOptions\n): Promise<any> {\n  if (!token) throw new Error('Please include the token to revoke');\n\n  isValidClientId(clientId);\n\n  if (\n    !isValidString(issuer) ||\n    (serviceConfiguration && !isValidString(serviceConfiguration.revocationEndpoint))\n  ) {\n    throw new Error('Config error: you must provide either an issuer or a revocation endpoint');\n  }\n\n  let revocationEndpoint;\n  if (serviceConfiguration && serviceConfiguration.revocationEndpoint) {\n    revocationEndpoint = serviceConfiguration.revocationEndpoint;\n  } else {\n    const response = await fetch(`${issuer}/.well-known/openid-configuration`);\n    const openidConfig = await response.json();\n\n    invariant(\n      openidConfig.revocation_endpoint,\n      'The OpenID config does not specify a revocation endpoint'\n    );\n\n    revocationEndpoint = openidConfig.revocation_endpoint;\n  }\n\n  const body = `token=${token}${isClientIdProvided ? `&client_id=${clientId}` : ''}`;\n  const headers = { 'Content-Type': 'application/x-www-form-urlencoded' };\n  try {\n    const results = await fetch(revocationEndpoint, {\n      method: 'POST',\n      headers,\n      body,\n    });\n    return results;\n  } catch (error) {\n    throw new Error(`Failed to revoke token ${error.message}`);\n  }\n}\n\nexport const { OAuthRedirect, URLSchemes } = ExpoAppAuth;\n"]}